there are classes Main and Employee. The main method in Main loads a list of Employee s and then attempts to print, in sorted order, the full names of those Employees whose salary is greater than 100,000 and whose last name begins with any letter that comes after ‘M’ in the alphabet. This exercise asks you to refactor this processing step in the main method so that it can be unit tested, using the techniques mentioned in the Lesson. Do the following:
a. It is difficult to test an expression that simply prints to console. Move this processing step into two methods, asString(List), which does the same processing, but returns a String rather than printing to the console, and printEmps(List), which calls asString and then prints the string to the console. Replace the processing step in the main method with a call to printEmps.
b. Create two packages, soln1, soln2, where you will put the two different types of solutions you will develop for testing this code.
c. In soln1, create a JUnit Test class that tests the asString method. Make sure you test with a few Employee instances so that at least one Employee is excluded from the list and at least one is included in the list. This is an example of the Simple approach mentioned in the slides.
d. In soln2, refactor the asString method so that method references are used to call auxiliary methods, as in the Complex case described in the lecture. Create auxiliary methods salaryGreaterThan100000(Employee e) and lastNameAfterMEmployee e) for this purpose. Then create a Test class in soln2 that tests these auxiliary methods, along with the fullName(Employee e) method.
Does this approach provide a good test for the asString method?